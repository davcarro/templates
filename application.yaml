AWSTemplateFormatVersion: '2010-09-09'
Description: High Availability Architecture - Application

Parameters:
  VPC:
    Type: AWS::EC2::VPC::Id

  AMIVersion:
    Description: Version of AMI to install
    Type: AWS::EC2::Image::Id
    Default: "ami-0fa1ca9559f1892ec"

Resources:
  EC2PyApp1:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref AMIVersion
      InstanceType: t2.micro
      SecurityGroupIds:
        - !Ref EC2SecurityGroup
      SubnetId: !Ref PrivateSubnet1
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y
          yum install -y python3-pip
          amazon-linux-extras install -y python3
          yum install -y git

          # Clone the repository and switch to the app directory
          git clone https://github.com/davcarro/workshops-labs.git /app
          cd /app/auto-scaling-web-app

          # Install application dependencies
          pip3 install -r requirements.txt

          # Start the Flask application
          nohup python3 app.py > /var/log/app.log 2>&1 &


  EC2PyApp2:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref AMIVersion
      InstanceType: t2.micro
      SecurityGroupIds:
        - !Ref EC2SecurityGroup
      SubnetId: !Ref PrivateSubnet2
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y
          yum install -y python3-pip
          amazon-linux-extras install -y python3
          yum install -y git

          # Clone the repository and switch to the app directory
          git clone https://github.com/davcarro/workshops-labs.git /app
          cd /app/auto-scaling-web-app

          # Install application dependencies
          pip3 install -r requirements.txt

          # Start the Flask application
          nohup python3 app.py > /var/log/app.log 2>&1 &


  AppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 2000
      Protocol: HTTP
      VpcId: !Ref VPC
      HealthCheckPath: /app
      TargetType: instance
  
  ASGTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 80
      Protocol: HTTP
      VpcId: !Ref VPC
      TargetType: instance    
  
  ELBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ASGTargetGroup
      LoadBalancerArn: !Ref WebLoadBalancer
      Port: 80
      Protocol: HTTP
  
  WebLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    DependsOn: ELBListener
    Properties:
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref ELBSecurityGroup
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '300'

  ELBListener2:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref AppTargetGroup
      LoadBalancerArn: !Ref AppLoadBalancer
      Port: 2000
      Protocol: HTTP
  
  AppLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    DependsOn: ELBListener2
    Properties:
      Subnets:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      SecurityGroups:
        - !Ref ELBSecurityGroup
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '300'

  LaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !Ref AMIVersion
      InstanceType: t2.micro
      SecurityGroups:
        - !Ref EC2SecurityGroup
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y
          yum install -y httpd
          yum install -y php

          systemctl start httpd
          systemctl enable httpd

          echo "<?php phpinfo(); ?>" > /var/www/html/phpinfo.php

  

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn: LaunchConfiguration
    Properties:
      LaunchConfigurationName: !Ref LaunchConfiguration
      Cooldown: "300"
      DesiredCapacity: "2"
      MaxSize: "4"
      MinSize: "2"
      VPCZoneIdentifier:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      TargetGroupARNs:
        - !Ref ASGTargetGroup

Outputs:
  LoadBalancerDNSName:
    Description: DNS name of the load balancer
    Value: !GetAtt WebLoadBalancer.DNSName

  ELBDNSName:
    Description: DNS name of the Elastic Load Balancer
    Value: !GetAtt AppLoadBalancer.DNSName
